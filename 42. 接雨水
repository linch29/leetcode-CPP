左右单调栈
class Solution {
public:
    int trap(vector<int>& height) {
        if (!height.size()) return 0;
        vector<int> leftss;
        vector<int> rightss;
        int n = height.size();
        int ans = 0;
        for (int i=0; i<n; i++) {
            if (leftss.empty() || height[i]>leftss.back()) leftss.push_back(height[i]);
            else leftss.push_back(leftss.back());
        }
        for (int i=n-1; i>=0; i--) {
            if (rightss.empty() || height[i]>rightss.back()) rightss.push_back(height[i]);
            else rightss.push_back(rightss.back());
        }
        for (int i=0; i<n; i++) {
            if (leftss[i]>rightss[n-1-i]) leftss[i] = rightss[n-1-i];
        }
        for (int i=0; i<n; i++) {
            ans += (leftss[i]-height[i]);
        }
        return ans;
    }
};
