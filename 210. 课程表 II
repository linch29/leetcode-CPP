class Solution {
public:
    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int> nodes;
        for (int i=0; i<numCourses; i++) {
            nodes.push_back(i);
        }
        vector<vector<int>> graph(numCourses);
        vector<int> indegree(numCourses);
        for(auto uv:prerequisites) {
            int u = uv[1], v = uv[0];
            graph[u].push_back(v);
            indegree[v]++;
        }
        return topsort(indegree,graph,nodes);
    }

    vector<int> topsort(vector<int>& indegree, vector<vector<int>>& graph, vector<int>& nodes) {
        vector<int> res;
        queue<int> q;
        for (auto node:nodes) {
            if (indegree[node] == 0) {
                q.push(node);
            }
        }
        while (!q.empty()) {
            int u = q.front(); q.pop();
            res.push_back(u);
            for (auto v:graph[u]) {
                indegree[v] -= 1;
                if (indegree[v]==0) q.push(v);
            }
        }
        if(res.size()==nodes.size())  return res;
        else return {};
    }
};
