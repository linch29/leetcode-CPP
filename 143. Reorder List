Recursive method (56ms)

class Solution {
public:
    void reorderList(ListNode* head) {
        if(!head || !head->next) return;
        int start = 0;
        helper(head,head,start,0);
        return;
    }
    
    void helper(ListNode*& left, ListNode* right, int& start, int end) {
        if (!right) return;
        if (start>end) return;
        helper(left,right->next,start,end+1);
        if (end == start+1) {
            left->next = right;
            right->next = nullptr;
            start = end+1;
        }
        else if (start == end) {
            right->next = nullptr;
        }
        else if (start<end) {
            ListNode* temp = left->next;
            left->next = right;
            right->next = temp;
            left = temp;
            start += 1;
        }
        return;
    }
    
};

Iterative (52ms)

class Solution {
public:
    void reorderList(ListNode* head) {
        vector<ListNode*> hold;
        while (head) {
            hold.push_back(head);
            head = head->next;
        }
        int n = hold.size();
        int i = 0;
        int j = n-1;
        while (i<=j) {
            if(i+1==j) {
                hold[i]->next = hold[j];
                hold[j]->next = nullptr;
                break;
            } 
            if(i==j) {
                hold[i]->next = nullptr;
                break;
            }
            hold[i]->next = hold[j];
            i++;
            hold[j]->next = hold[i];
            j--;
        }
    }
};
