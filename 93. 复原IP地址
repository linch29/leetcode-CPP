DFS回溯
class Solution {
public:
    vector<string> ans;
    vector<string> restoreIpAddresses(string s) {
        int slen = s.size();
        string start;
        for (int i=1; i<4; i++) {
            start = s.substr(0,i);
            if (valid(start)) {
                helper(s,start,0,i,slen);
            }
        }
        return ans;
    }
    void helper(string& s, string& cur, int pointnum, int curlen, int& slen) {
        if (curlen==slen && pointnum==3) {
            ans.push_back(cur);
            return;
        }
        if (curlen>=slen || pointnum>=3) return;

        for (int i=1; i<4; i++) {
            string nextcur = s.substr(curlen,i);
            if (valid(nextcur)) {
                cur = cur + '.' + nextcur;
                helper(s,cur,pointnum+1,curlen+i,slen);
                cur = cur.substr(0,cur.size()-nextcur.size()-1);
            }
            else continue;
        }
    }

    bool valid(string cur) {
        int n = cur.size();
        if (n>=2 && cur[0]=='0') return false;
        int sum = 0;
        for (int i=0; i<n; i++) {
            sum = sum*10 + (cur[i]-'0');  // convert char to int
        }
        if (0<=sum && sum<=255) return true;
        else {
            return false;
        }
    }
};
