class Solution {
public:
    vector<int> parent;
    int cnt = 0;
    int find_parent(int u) {
        if (u==parent[u]) return u;
        else {
            parent[u] = find_parent(parent[u]);
            return parent[u];
        }
    }

    void join(int i, int j) {
        int iroot = find_parent(i), jroot = find_parent(j);
        if (iroot!=jroot) {
            parent[jroot] = iroot;
            cnt++;
        }
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        parent = vector<int>(n);
        for (int i=0; i<n; i++) {
            parent[i] = i;
        }
        for (int i=0; i<n-1; i++) {
            for (int j=i+1; j<n; j++) {
                if(stones[i][0]==stones[j][0] || stones[i][1]==stones[j][1]) join(i,j);
            }
        }
        return cnt;

    }
};



更快的方法（把每个点的x,y连通，这样享有共同x或y的不同点也将连通）
class Solution {
public:
    vector<int> parent = vector<int>(20005);

    int find_parent(int u) {
        if (u==parent[u]) return u;
        else {
            parent[u] = find_parent(parent[u]);
            return parent[u];
        }
    }

    void join(int i, int j) {
        int iroot = find_parent(i), jroot = find_parent(j);
        if (iroot!=jroot) {
            parent[jroot] = iroot;
        }
        return;
    }

    int removeStones(vector<vector<int>>& stones) {
        int n = stones.size();
        unordered_map<int,bool> mp;
        for (int i=0; i<parent.size(); i++) {
            parent[i] = i;
        }
        for (int i=0; i<n; i++) {
            join(stones[i][0],stones[i][1]+10001);
        }
        for (int i=0; i<n; i++) {
            mp[find_parent(stones[i][0])]=true;
        }
        return stones.size()-mp.size();

    }
};
