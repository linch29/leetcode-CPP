#include<bits/stdc++.h>
using namespace std;

struct cmp {
    bool operator() (const pair<int,int>& a, const pair<int,int>& b) {
        return a.second > b.second;
    }
};

int v(int i, int j, int n) {
    return i*n+j;
}
/* 
Given score, i, j, n, graph and weight, compute (i,j)'s neighbors and corresponding weights.
Finish building graph.
*/
void compute_edge(vector<vector<int>>& score, int i, int j, int n, vector<vector<int>>& G, vector<vector<int>>& W) {
    if (i>0) {
        G[v(i,j,n)].push_back(v(i-1,j,n));
        W[v(i,j,n)].push_back(abs(score[i][j]-score[i-1][j]));
    }
    if (i<score.size()-1) {
        G[v(i,j,n)].push_back(v(i+1,j,n));
        W[v(i,j,n)].push_back(abs(score[i][j]-score[i+1][j]));
    }
    if (j>0) {
        G[v(i,j,n)].push_back(v(i,j-1,n));
        W[v(i,j,n)].push_back(abs(score[i][j]-score[i][j-1]));
    }
    if (j<score[0].size()-1) {
        G[v(i,j,n)].push_back(v(i,j+1,n));
        W[v(i,j,n)].push_back(abs(score[i][j]-score[i][j+1]));
    }
}


/* Given G, W, start and dis, finish Dijkstra algorthim */
void Dijkstra(vector<vector<int>>& G,vector<vector<int>>& W,int start,vector<int>& dis) {
    dis[start] = 0;
    priority_queue<pair<int,int>, vector<pair<int,int>>, cmp> vertex_dis;
    vertex_dis.push(make_pair(start,0));
    while (!vertex_dis.empty()) {
        int u = vertex_dis.top().first; vertex_dis.pop();
        for (int i=0; i<G[u].size(); i++) {
            int v = G[u][i];
            if (dis[v]>dis[u]+W[u][i]) {
                dis[v] = dis[u]+W[u][i];
                vertex_dis.push(make_pair(v,dis[v]));
            }
        }
    }
}

int main() {
    vector<vector<int>> example;
    example.push_back({1,3,6});
    example.push_back({2,7,9});
    example.push_back({1,100,1});
    int n = example.size();
    vector<vector<int>> G(n*n);
    vector<vector<int>> W(n*n);
    vector<int> dis(n*n,INT_MAX);
    
    for (int i=0; i<n; i++) {
        for (int j=0; j<n; j++) {
            compute_edge(example,i,j,n,G,W);
        }
    }
    
    Dijkstra(G,W,0,dis);
    cout << dis[n*n-1];
    return 0;
}
