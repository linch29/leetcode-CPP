Devide and conquer (40ms)

class Solution {
public:
    ListNode* mergetwo(ListNode* a, ListNode* b) {
        ListNode* dummy = new ListNode(-1);
        ListNode* cur = dummy;
        while(a&&b) {
            if (a->val > b->val) {
                cur->next = new ListNode(b->val);
                cur = cur->next;
                b = b->next;
            }
            else {
                cur->next = new ListNode(a->val);
                cur = cur->next;
                a = a->next;
            }
        }
        if (!a) {
            cur->next = b;
        }
        else {
            cur->next = a;
        }
        return dummy->next;
    }
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if (lists.size() == 0) {
            return nullptr;
        }
        int n = lists.size();
        vector<ListNode*> first = lists;
        vector<ListNode*> second;
        while (first.size()>1) {
            for (int i=0; i<first.size()-1;i+=2) {
                second.push_back(mergetwo(first[i],first[i+1]));
            }
            if (first.size()%2 != 0) second.push_back(first[first.size()-1]);
            first = second;
            second.clear();
        }
        return first[0];
       
    }
};
