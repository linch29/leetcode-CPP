超时的并查集

class Solution {
public:
    vector<int> parent;

    int find_parent(int x) {
        if (x==parent[x]) return x;
        else {
            parent[x] = find_parent(parent[x]);
            return parent[x];
        }
    }

    void join(int i, int j) {
        int iroot = find_parent(i);
        int jroot = find_parent(j);
        if (iroot!=jroot) {
            parent[jroot] = iroot;
        }
    }
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        unordered_map<int,string> int2str;
        int cnt = n;
        for( int i=0; i<n; i++) {
            for (int j=1; j<accounts[i].size(); j++) {
                int2str[cnt] = accounts[i][j];
                cnt++;
            }
        }
        parent = vector<int>(cnt);
        for (int i=0; i<n; i++) {
            parent[i]=i;
        }
        cnt = n;
        for( int i=0; i<n; i++) {
            for (int j=1; j<accounts[i].size(); j++) {
                parent[cnt] = i;
                cnt++;
            }
        }

        for (int i=n; i<cnt; i++) {
            for (int j=i+1;j<cnt;j++) {
                if (parent[i]!=parent[j] && int2str[i]==int2str[j]) {
                    join(i,j);
                }
            }
        }

        vector<set<string>> res(n);
        for (int i=n; i<parent.size(); i++) {
            res[find_parent(i)].insert(int2str[i]);
        }

        vector<vector<string>> ans;
        for (int i=0; i<n; i++) {
            if (res[i].size()) {
                vector<string> temp;
                temp.push_back(accounts[i][0]);
                for (auto e: res[i]) {
                    temp.push_back(e);
                }
                ans.push_back(temp);
            }
        }
        return ans;
    }
};


/* 一个可以通过的并查集 */
class UnionFind{
private:
    unordered_map<string,string> father;
    // 根节点所在集合的所有账户
    unordered_map<string,vector<string>> accounts;

public:
    unordered_map<string,string> get_father(){
        return father;
    }
    
    unordered_map<string,vector<string>> get_accounts(){
        return accounts;
    }
    
    string find(string s){
        if(father[s] == "root") return s;
        
        // 递归的路径压缩处理
        father[s] = find(father[s]);
        
        return father[s];
    }
    
    void merge(string x,string y){
        string root_x = find(x);
        string root_y = find(y);
        
        if(root_x == root_y) return;
        father[root_y] = root_x;
        for(auto& account: accounts[root_y])
            accounts[root_x].push_back(account);
        accounts.erase(root_y);
        /*
        // 按秩合并，更新根节点和所属的账户
        if(accounts[root_x].size() < accounts[root_y].size()){
            father[root_x] = root_y;
            for(auto& account: accounts[root_x])
                accounts[root_y].push_back(account);
            accounts.erase(root_x);
        }else{
            father[root_y] = root_x;
            for(auto& account: accounts[root_y])
                accounts[root_x].push_back(account);
            accounts.erase(root_y);
        } */
        
    }
    
    void add(string x){
        if(!father.count(x)){
            father[x] = "root";
            accounts[x] = {x};
        }
    }
    
};

class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        UnionFind uf;
        // email -> name
        unordered_map<string,string> email_to_name;
        
        for(auto& v: accounts){
            // 找到姓名和主账户
            string name = v[0];
            string master = v[1];
            email_to_name[master] = name;
            uf.add(master);
            
            // 和其余的账户一一合并
            for(int i = 2;i < v.size();i++){
                email_to_name[v[i]] = name;
                uf.add(v[i]);
                uf.merge(master,v[i]);
            }
        }
        
        vector<vector<string>> res;
        unordered_map<string,string> father = uf.get_father();
        unordered_map<string,vector<string>> acc = uf.get_accounts();
        
        for(auto& p: father){
            // 是根节点
            if(p.second == "root"){
                // 添加user
                vector<string> user_account = {email_to_name[p.first]};
                
                // 添加账户
                sort(acc[p.first].begin(),acc[p.first].end());
                for(auto& email: acc[p.first])
                    user_account.push_back(email);
                
                res.push_back(user_account);
            }
        }
        
        return res;

    }
};

/* DFS解法 */

class Solution {
public:
    unordered_map<string,vector<string>> build_graph(vector<vector<string>>& accounts){
        /* 建图 */
        unordered_map<string,vector<string>> graph;
        
        for(auto& account: accounts){
            
            string master = account[1];
            
            // 对剩余账户做一个去重
            for(auto& email: unordered_set<string>(account.begin()+2,account.end())){
                
                graph[master].push_back(email);
                graph[email].push_back(master);
            }
        }
        
        return graph;
    }
    
    void dfs(unordered_map<string,vector<string>>& graph,unordered_set<string>& visited,string& email,vector<string>& emails){
        /* 深搜遍历 */
        // 已经访问过的就剪枝
        if(visited.count(email))
            return;
        
        visited.insert(email);
        emails.push_back(email);
        
        // 对邻居节点继续深搜
        for(auto& neighbor: graph[email])
            dfs(graph,visited,neighbor,emails);
    }
    
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        // 建图
        unordered_map<string,vector<string>> graph = build_graph(accounts);
        
        vector<vector<string>> res;
        
        unordered_set<string> visited;
        
        for(auto& account: accounts){
            vector<string> emails;
            // 深搜得到name的所有邮箱
            dfs(graph,visited,account[1],emails);
            
            if(emails.empty())
                continue;
            
            // 排序，添加姓名，加入到答案中
            sort(emails.begin(),emails.end());
            emails.insert(emails.begin(),account[0]);
            res.push_back(emails);
        }
        
        return res;
    }
};
