Non-recursive (12ms)

class Solution {
public:
    Node* copyRandomList(Node* head) {
        if (!head) return nullptr;

        unordered_map<Node*, Node*> m;
        Node* new_head = new Node(head->val);
        Node* result = new_head;

        m[head] = new_head;
        m[nullptr] = nullptr;

        for (; head; head = head->next, new_head = new_head->next) {
            if (!m.count(head->random)) {
                m[head->random] = new Node(head->random->val);
            }
            new_head->random = m[head->random];

            if (!m.count(head->next)) {
                m[head->next] = new Node(head->next->val);
            }
            new_head->next = m[head->next];
        }
        return result;
    }
};

dfs recursive (16ms)

class Solution {
public:
    
    Node* copyRandomList(Node* head) {
        
        //mapping original node to its copy
        unordered_map<Node*, Node*> visited;
        visited[nullptr] = nullptr;
        return dfs(head,visited);
        
    }
    
    Node* dfs(Node* head, unordered_map<Node*,Node*>& visited) {
        Node* curr;
        if (visited.find(head)==visited.end()) {
            curr = new Node(head->val);
            visited[head] = curr;
        }
        else return visited[head];
        if (head->next) curr->next = dfs(head->next,visited);
        if (head->random) curr->random = dfs(head->random,visited);
        return curr;
    }
};
