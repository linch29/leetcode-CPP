普适但超时的dp 

class Solution {
public:
    int longestValidParentheses(string s) {
        int n = s.length();
        if (n==0) return 0;
        int ans = 0;
        bool dp[n][n];
        memset(dp,false,sizeof(dp));
        for (int i=0; i<n-1;i++) {
            if (s[i]=='(' && s[i+1]==')') {
                dp[i][i+1] = true;
                ans = 2;
            }
        }
        
        for (int l=1; l<n;l+=2) {
            for (int i=0; i+l<n;i+=1) {
                for (int k=i+1; k+1<=i+l-1;k++) {
                    if (dp[i+1][i+l-1]==true && s[i]=='(' && s[i+l]==')') {
                        dp[i][i+l] = true;
                        ans = max(l+1,ans);
                    }
                    
                    if(dp[i][k] && dp[k+1][i+l]) {
                        dp[i][i+l] = true;
                        ans = max(l+1,ans);
                    }
                }
            }
        }
        return ans;
    }
};

顺序 倒序的栈遍历

class Solution {
public:
    int longestValidParentheses(string s) {
        int ans = 0, cnt = 0;
        vector<char> ss;
        int n = s.size();
        for (int i=0; i<n; i++) {
            if (s[i]=='(') ss.push_back(s[i]);
            else {
                if (ss.empty()) cnt=0;
                else {
                    ss.pop_back();
                    cnt+=2;
                    if (ss.empty()) {
                        ans = max(ans,cnt);
                    }
                }
            }
        }
        cnt = 0;
        ss.clear();
        for (int i=n-1; i>=0; i--) {
            if (s[i]==')') ss.push_back(s[i]);
            else {
                if (ss.empty()) cnt=0;
                else {
                    ss.pop_back();
                    cnt+=2;
                    if (ss.empty()) {
                        ans = max(ans,cnt);
                    }
                }
            }
        }
        return ans;
    }
};
