DFS

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int ans = 0;
        vector<bool> visited;
        int row = grid.size();
        int col = grid[0].size();
        visited = vector<bool>(row*col,false);
        for (int i=0; i<row; i++) {
            for (int j=0; j<col; j++) {
                if (grid[i][j]=='1' && !visited[i*col + j]) {
                    ans++;
                    dij(visited,i,j,grid);
                }
            }
        }
        return ans;
    }

    void dij(vector<bool>& visited, int i, int j, vector<vector<char>>& grid) {
        int row = grid.size(), col = grid[0].size();
        visited[i*col+j] = true;
        vector<int> dx = {-1,1,0,0};
        vector<int> dy = {0,0,-1,1};
        for (int c=0; c<4; c++) {
            int nx = i+dx[c], ny = j+dy[c];
            if (check(nx,ny,row,col) && !visited[nx*col+ny] && grid[nx][ny]=='1') dij(visited,nx,ny,grid);
        }
    }

    bool check(int i, int j, int row, int col) {
        return (i<row && i>=0 && j<col && j>=0);
    }
};
